# file_path="data_raw/signif.txt"
# loaded_data<-readr::read_tsv(file_path)
#library(readr)
#library(magrittr)
#library(dplyr)
#library(stringr)
# download NOAA data from NOAA website.
# there are many fields with NAs
# Instructions:
# In the below functions we are doing the following things:
# 1. Loading the data into a dataframe
# 2. Cleaning the data and ficing date fields
# 3. Fixing location name field and also converting latitude and longitude fields
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
#' @title Loads raw data
#'
#' @description Loads raw data from a file folder
#'
#'
#' @return Returns a dataframe result after calling read_delim
#'
#' @importFrom readr read_delim
#'
#' @export
#'
#' @examples
#' \dontrun{
#'   NOAA_df_raw<-load_data()
#' }
#'
#'
load_data<-function(){
file_path="data_raw/signif.txt"
loaded_data<-readr::read_tsv(file_path)
return(loaded_data)
}
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
#' @title cleans the loaded data
#'
#' @description It takes the raw data as input and then does the following things: 1.
#' 1. Creates a date column using year month and day
#' 2. Converts Latitude and longitude columns into numeric
#' 3. Converts FLAG_TSUNAMI column
#' 4. Calls eq_location_clean to clean the location column
#'
#' @param raw_data datafram of raw NOAA dataset
#'
#' @return Returns cleaned dataframe
#'
#' @importFrom dplyr filter, mutate
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_raw<-load_data()
#' NOAA_df<-eq_clean_data(NOAA_df_raw)
#' }
#'
#'
eq_clean_data<-function(raw_data){
clean_df <- raw_data %>%
dplyr::mutate(DATE = as.Date(paste0(YEAR,'-',MONTH,'-',DAY), format="%Y-%m-%d")) %>%
dplyr::mutate(LATITUDE = as.numeric(LATITUDE), LONGITUDE = as.numeric(LONGITUDE)) %>%
dplyr::mutate(FLAG_TSUNAMI = as.factor(FLAG_TSUNAMI))
# clean_df2<-eq_clean_location(clean_df)
clean_df2<-eq_location_clean(clean_df)
return(clean_df2)
}
#' @title Cleans the LOCATION_NAME column
#'
#' @description Cleans the location name column and strips out unwanted
#' characters
#'
#' @param df a dataframe
#'
#' @return Returns a cleaned dataframe with modified Location Name column
#'
#' @importFrom dplyr filter, mutate
#' @importFrom stringr str_trim, str_to_title
#'
#' @export
#'
#' @examples
#' \dontrun{
#'   df_location <- load_data() %>% eq_location_clean()
#' }
#'
eq_location_clean <- function(df){
df <- df %>% dplyr::mutate(CLEAN_LOCATION_NAME = stringr::str_trim(gsub(".*:","", LOCATION_NAME))) %>%
dplyr::mutate(CLEAN_LOCATION_NAME = stringr::str_to_title(CLEAN_LOCATION_NAME))
return(df)
}
#library(dplyr)
#library(ggplot2)
#library(grid)
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
#' @title geom_timeline function
#'
#' @description This function is used in addition to GeomTimeline
#' See the layout contained within the course materials p.g. 452
#' Here the layout of this function is very similar.
#' This geom looks to chart a timeline of earthquakes for a given country / countries
#' with points (in the example) representing earthquake events, point size indicating
#' earthquake magnitude and colour representing number of deaths. x (the date) is a
#' required aesthetic whereas y (country) is optional.
#'
#' @import ggplot2, dplyr, grid
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#'  filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' ggplot(NOAA_df_China_USA, aes(x = DATE, y = COUNTRY,
#'                               color = as.numeric(TOTAL_DEATHS),
#'                               size = as.numeric(EQ_PRIMARY),
#'                               label = CLEAN_LOCATION_NAME)) +
#'   geom_timeline() +
#'   labs(size = "Richter scale value", color = "# deaths") +
#'   ggplot2::theme(panel.background = ggplot2::element_blank(),
#'                  legend.position = "bottom",
#'                  axis.title.y = ggplot2::element_blank()) +
#'   ggplot2::xlab("DATE")
#' }
geom_timeline <- function(mapping = NULL, data = NULL,
stat = "identity", position = "identity", na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimeline,
mapping = mapping,
data = data,
stat = stat,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' @title geom_timeline_label function
#'
#' @description This function is used to label the points in the graph
#'
#' @param n_max
#'
#' @import ggplot2, dplyr, grid
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#' filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' ggplot(NOAA_df_China_USA , aes(x = DATE, y = COUNTRY,
#'                                color = as.numeric(TOTAL_DEATHS),
#'                                size = as.numeric(EQ_PRIMARY),
#'                                label = CLEAN_LOCATION_NAME)) +
#'   geom_timeline() +
#'   labs(size = "Richter scale value", color = "# deaths") +
#'   ggplot2::theme(panel.background = ggplot2::element_blank(),
#'                  legend.position = "bottom",
#'                  axis.title.y = ggplot2::element_blank()) +
#'   ggplot2::xlab("DATE") +
#'   geom_timeline_label(data=NOAA_df_China_USA)
#' }
geom_timeline_label <- function(mapping = NULL, data = NULL,
stat = "identity", position = "identity", na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE, n_max = 5, ...) {
# here we alter the number of earthquakes we apply a label to as n_max
data <- data %>% dplyr::mutate(COUNTRY = as.character(COUNTRY), EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
dplyr::arrange(COUNTRY, desc(EQ_PRIMARY))
countries <- unique(data$COUNTRY)
df_all <- data.frame()
for(country in countries){
df <- data %>% dplyr::filter(COUNTRY == country) %>% head(n_max)
df_all <- rbind(df_all, df)
}
data <- df_all
#print(data)
ggplot2::layer(
geom = GeomTimelineLabel,
mapping = mapping,
data = data,
stat = stat,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' @title GeomTimeline class
#'
#' @description building a GeomTimeline class which is used in a function
#'
#' @import ggplot2, grid, scales
#'
#' @export
#'
#' @examples
#' \dontrun{
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#'  filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' ggplot(NOAA_df_China_USA, aes(x = DATE, y = COUNTRY,
#'                               color = as.numeric(TOTAL_DEATHS),
#'                               size = as.numeric(EQ_PRIMARY),
#'                               label = CLEAN_LOCATION_NAME)) +
#'   geom_timeline() +
#'   labs(size = "Richter scale value", color = "# deaths") +
#'   ggplot2::theme(panel.background = ggplot2::element_blank(),
#'                  legend.position = "bottom",
#'                  axis.title.y = ggplot2::element_blank()) +
#'   ggplot2::xlab("DATE")
#' }
#'
#'
GeomTimeline <- ggplot2::ggproto("GeomTimeline", ggplot2::Geom,
required_aes = c("x"), # optional y aesthetic
default_aes = ggplot2::aes(y=1, alpha=0.7, fill="grey", colour="grey", size=1, shape=21, stroke=1),
draw_key = ggplot2::draw_key_point,
# we'll need points across a line for each level / country
draw_group = function(data, panel_scales, coord) {
#print(head(data))
coords <- coord$transform(data, panel_scales)
#?grid::pointsGrob
# pch -> numeric or character vector indicating what sort of plotting symbol to use
# points for more details: pch = 21 is a filled circle. See page 259 of course materials
points <- grid::pointsGrob(coords$x, coords$y,
pch = coords$shape,
size = grid::unit(coords$size / 6, "lines"),        # see ?grid::unit
gp = gpar(col = alpha(coords$colour, coords$alpha), # see ?scales::alpha
fill = alpha(coords$colour, coords$alpha)
)
)
#?grid::segmentsGrob
line <- grid::segmentsGrob(
x0 = 0, y0 = coords$y,
x1 = 1, y1 = coords$y,
gp = gpar(col = "grey", alpha=0.7, size=1)
)
grid::gList(points, line)
}
)
#' @title GeomTimelineLabel class
#'
#' @description This is a GeomTimelineLabel class which is used in the
#' functions
#'
#' @import ggplot2, grid, scales
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#' filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' ggplot(NOAA_df_China_USA , aes(x = DATE, y = COUNTRY,
#'                                color = as.numeric(TOTAL_DEATHS),
#'                                size = as.numeric(EQ_PRIMARY),
#'                                label = CLEAN_LOCATION_NAME)) +
#'   geom_timeline() +
#'   labs(size = "Richter scale value", color = "# deaths") +
#'   ggplot2::theme(panel.background = ggplot2::element_blank(),
#'                  legend.position = "bottom",
#'                  axis.title.y = ggplot2::element_blank()) +
#'   ggplot2::xlab("DATE") +
#'   geom_timeline_label(data=NOAA_df_China_USA)
#' }
GeomTimelineLabel <- ggplot2::ggproto("GeomTimelineLabel", ggplot2::Geom,
required_aes = c("x", "label"),
default_aes = ggplot2::aes(y=1, alpha=0.7, fill="grey", colour="grey"),
draw_key = ggplot2::draw_key_label,
# we can already get the points and horizontal line using geom_timeline
# here we look to add a vertical line to a label
draw_group = function(data, panel_scales, coord) {
#print(head(data))
coords <- coord$transform(data, panel_scales)
y_extension <- 0.05
line <- grid::segmentsGrob(# get the vertical line
x0 = coords$x, y0 = coords$y,
x1 = coords$x, y1 = coords$y + y_extension,
gp = grid::gpar(col = "grey", alpha=0.7, size=1)
)
text <- grid::textGrob(# ?grid::textGrob
label=coords$label,
x = coords$x,
y = coords$y + y_extension,
rot = 45,
just = c("left", "bottom")
)
grid::gList(line, text)
}
)
#' @title This is used to plot the earthquake timeline
#'
#' @description This is used to plot the earthquake timeline
#'
#' @param df A dataframe
#'
#' @return NULL
#'
#' @import ggplot2
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#' filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' plot_earthquakes_timeline(NOAA_df_China_USA)
#' }
#'
plot_earthquakes_timeline <- function(df){
ggplot(df, aes(x = date, y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY))) +
geom_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
ggplot2::theme(panel.background = ggplot2::element_blank(),
legend.position = "bottom",
axis.title.y = ggplot2::element_blank()) +
ggplot2::xlab("DATE")
}
#' @title plotting the earthquake timeline
#'
#' @description plotting the earthquake timeline using a dataframe
#'
#' @param df A dataframe
#'
#' @return NULL
#'
#' @import ggplot2
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df_China_USA <- NOAA_df %>%
#' filter(COUNTRY %in% c("CHINA", "USA"), YEAR > 2000)
#' plot_earthquakes_timeline_label(NOAA_df_China_USA)
#' }
#'
plot_earthquakes_timeline_label <- function(df){
ggplot(df, aes(x = date, y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY),
label = CLEAN_LOCATION_NAME)) +
geom_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
ggplot2::theme(panel.background = ggplot2::element_blank(),
legend.position = "bottom",
axis.title.y = ggplot2::element_blank()) + ggplot2::xlab("DATE") +
geom_timeline_label(data=df)
}
# library(dplyr)
# library(leaflet)
# library(lubridate)
#' @title Plot a leaflet map
#'
#' @description We take a subset of our earthquake data and plot this on a map
#' using leaflet. See the leaflet docs (?leaflet) for a few relevant examples.
#' The input dataframe requires columns including LONGITUDE, LATITUDE, EQ_PRIMARY.
#' The annotation column ('annot_col') is also a required argument (no defaults).
#'
#' @param df a dataframe
#' @param annot_col annotation column
#'
#' @return an interactive leaflet map
#'
#' @import leaflet, dplyr
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df<-eq_clean_data(loaded_data)
#' df <- NOAA_df %>% filter(COUNTRY %in% c("MEXICO"), YEAR > 2000)
#' map1<-eq_map(df,annot_col = "date")
#' print(map1)
#' }
#'
eq_map <- function(df, annot_col){
lmap <- df %>% leaflet::leaflet() %>% leaflet::addTiles() %>%
leaflet::addCircleMarkers(lng=df$LONGITUDE,
lat=df$LATITUDE,
radius=df$EQ_PRIMARY,
popup=df[[annot_col]],
color="blue",
weight=1,
opacity=0.5)
}
#' @title Create earthquake labels
#'
#' @description This function is used tp create earthquake labels
#'
#' @param df a dataframe
#'
#' @return Returns a character vector
#'
#' @import dplyr, lubridate
#'
#' @export
#'
#' @examples
#' \dontrun{
#' NOAA_df<-eq_clean_data(loaded_data)
#' df <- NOAA_df %>% filter(COUNTRY %in% c("MEXICO"), YEAR > 2000)
#' map2<-df %>% dplyr::mutate(popup_text = eq_create_label(.)) %>%
#'   eq_map(annot_col = "popup_text")
#' print(map2)
#' }
#'
eq_create_label <- function(df){
len <- length(df$CLEAN_LOCATION_NAME)
locations <- df$CLEAN_LOCATION_NAME
magnitude <- df$EQ_PRIMARY
deaths <- df$DEATHS
ptxt <- rep("", len)
for(i in 1:len){
txt <- paste0("<b>Location: </b>", locations[i], "</br>",
"<b>Magnitude: </b>", magnitude[i], "</br>",
"<b>Total Deaths: </b>", deaths[i])
ptxt[i] <- txt
}
return(ptxt)
}
use_data_raw()
use_data()
use_data()
## code to prepare `DATASET` dataset goes here
usethis::use_data("signif")
library(testthat)
load_all()
load_all()
load_all()
devtools::docuement()
library(devtools)
devtools::docuement()
devtools::document()
load_all()
load_all()
devtools::document()
load_all()
devtools::document()
library(RCapstone)
load_all()
devtools::document()
load_all()
load_all()
devtools::document()
library(RCapstone)
library(RCapstone)
load_all()
library(RCapstone)
load_all()
devtools::document()
library(RCapstone)
#devtools::use_testthat()
#https://tgmstat.wordpress.com/2013/06/26/devtools-and-testthat-r-packages/
Sys.setenv("R_TESTS" = "")
library(testthat)
library(rcap)
test_check("rcap")
#devtools::use_testthat()
#https://tgmstat.wordpress.com/2013/06/26/devtools-and-testthat-r-packages/
Sys.setenv("R_TESTS" = "")
library(testthat)
library(rcap)
test_check("RCapstone")
#devtools::use_testthat()
#https://tgmstat.wordpress.com/2013/06/26/devtools-and-testthat-r-packages/
Sys.setenv("R_TESTS" = "")
library(testthat)
library(rcap)
test_check("RCapstone")
Sys.setenv("R_TESTS" = "")
library(testthat)
library(RCapstone)
test_check("RCapstone")
load_all()
devtools::document()
load_all()
load_all()
load_all()
test_check("RCapstone")
test_check(RCapstone)
test_check("RCapstone")
library(testthat)
library(RCapstone)
testthat("Locating data file in package", {
test_data_path <- system.file("extdata", "signif.txt", package="RCapstone")
expect_true( file.exists(test_data_path) )
})
test_check("RCapstone")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(RCapstone)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::install_github()
